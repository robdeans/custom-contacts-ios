// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

// swiftlint:disable:all

{% if catalogs %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}

import UIKit

{% set enumName %}{{param.enumName|default:"Asset"}}{% endset %}
{% set imageType %}{{param.imageTypeName|default:"ImageAsset"}}{% endset %}
{% set colorType %}{{param.colorTypeName|default:"ColorAsset"}}{% endset %}

{{accessModifier}} struct {{imageType}} {
  {{accessModifier}} fileprivate(set) var name: String

  {{accessModifier}} var image: UIImage {
    guard let result = UIImage(named: name) else {
      fatalError("Unable to load image named \(name)")
    }
    return result
  }
}

{{accessModifier}} struct {{colorType}} {
  {{accessModifier}} fileprivate(set) var name: String

  @available(iOS 11.0, tvOS 11.0, watchOS 4.0, OSX 10.13, *)
  {{accessModifier}} var color: UIColor {
    return UIColor(asset: self)
  }
}

{% macro enumBlock assets %}
  {% call casesBlock assets %}
  {% if not param.noAllValues %}
  {{accessModifier}} static let allImages: [{{imageType}}] = [
		{% filter indent:2 %}{% call allValuesBlock assets "image" "" %}{% endfilter %}
  ]

  {{accessModifier}} static let allColors: [{{colorType}}] = [
    {% filter indent:2 %}{% call allValuesBlock assets "color" "" %}{% endfilter %}
  ]
  {% endif %}
{% endmacro %}
{% macro casesBlock assets %}
  {% for asset in assets %}
  {% if asset.type == "image" %}
	// sourcery: assetName = "{{asset.value}}"
  {{accessModifier}} static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{imageType}}(name: "{{asset.value}}")
  {% elif asset.type == "color" %}
	// sourcery: assetName = "{{asset.value}}"
  {{accessModifier}} static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{colorType}}(name: "{{asset.value}}")
  {% elif asset.items %}
  {{accessModifier}} enum {{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call casesBlock asset.items %}{% endfilter %}
  }
  {% endif %}
  {% endfor %}
{% endmacro %}
{% macro allValuesBlock assets filter prefix %}
  {% for asset in assets %}
  {% if asset.type == filter %}
  {{prefix}}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}},
  {% elif asset.items %}
  {% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
  {% filter indent:2 %}{% call allValuesBlock asset.items filter prefix2 %}{% endfilter %}
  {% endif %}
  {% endfor %}
{% endmacro %}

{{accessModifier}} enum {{enumName}} {
  {% if catalogs.count > 1 %}
  {% for catalog in catalogs %}
  {{accessModifier}} enum {{catalog.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call enumBlock catalog.assets %}{% endfilter %}
  }
  {% endfor %}
  {% else %}
  {% call enumBlock catalogs.first.assets %}
  {% endif %}
}

{{accessModifier}} extension UIImage {
  convenience init!(asset: {{imageType}}) {
    #if os(iOS) || os(tvOS)
    self.init(named: asset.name, in: Bundle(for: BundleHelper.self), compatibleWith: nil)
    #elseif os(watchOS)
    self.init(named: asset.name)
    #endif
  }
}

{{accessModifier}} extension UIColor {
  @available(iOS 11.0, tvOS 11.0, watchOS 4.0, OSX 10.13, *)
  convenience init!(asset: {{colorType}}) {
    #if os(iOS) || os(tvOS)
    self.init(named: asset.name, in: Bundle(for: BundleHelper.self), compatibleWith: nil)
    #elseif os(watchOS)
    self.init(named: asset.name)
    #endif
  }
}

private final class BundleHelper { }

{% else %}
// No assets found
{% endif %}
